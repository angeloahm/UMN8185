V0 = zeros(n_A, n_k);
V = zeros(n_A, n_k);
c_policy = zeros(n_A, n_k);
k_policy = zeros(n_A, n_k);
interp_vec = struct([]);
V_inter = zeros(n_A, 1);

utility = @(c) (c .^ (1-gamma))/(1-gamma);

for i_A=1:n_A
    A = A_grid(i_A);
    for i_k=1:n_k
        k = k_grid(i_A);
        V0(i_A, i_k) = utility(A*k^alpha + (1-delta)*k);
        
    end
end

for iter=1:max_iter
    

    
    for i_A=1:n_A
        A = A_grid(i_A);
        inter = pchip(k_grid, )
        
        for i_k=1:n_k
            k = k_grid(i_k);
            keyboard
            k_prime = fzero(FOC, k);
            
            k_policy(i_k,i_A) = k_prime;
            c_policy(i_k, i_A) = A*k^alpha + (1-delta)*k - k_prime;
            V(i_k, i_A) = utility(c_policy(i_k, i_A)) + beta*sum( P(i_A,:) .* V_inter(k_prime) );
        end
    end 
    
    
%     for fake_iter = 1:m
%         V_howard = utility(c_policy) + beta*(P*V);
%         V = V_howard;
%     end
    
    norm = max(abs(V(:)-V0(:)));
    
    if norm<eps
        fprintf('VFI converged at iteration: %.5f \n', iter)
        break
    else
        fprintf('Error = %.8f; Iter = %.8f \n', norm, iter)
        V0 = V;
    end
    
    
    
end


        